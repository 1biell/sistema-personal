import { PrismaClient } from "@prisma/client";import bcrypt from "bcryptjs";import { PLANS, getStudentLimitForPlan } from "../utils/plans.js";import { deleteUserCascade } from "../utils/deleteCascade.js";const prisma = new PrismaClient();// === Atualizar Perfil ===export const updateProfile = async (req, res) => {  try {    const { name, email } = req.body;    const userId = req.user.id;    if (!name || !email)      return res.status(400).json({ error: "Nome e e-mail são obrigatórios" });    const updatedUser = await prisma.user.update({      where: { id: userId },      data: { name, email },    });    res.json({      id: updatedUser.id,      name: updatedUser.name,      email: updatedUser.email,      role: updatedUser.role,    });  } catch (error) {    console.error("Erro ao atualizar perfil:", error);    res.status(500).json({ error: "Erro ao atualizar perfil" });  }};// === Trocar Senha ===export const updatePassword = async (req, res) => {  try {    const userId = req.user.id;    const { currentPassword, newPassword } = req.body;    if (!currentPassword || !newPassword) {      return res        .status(400)        .json({ error: "Preencha todos os campos obrigatórios" });    }    const user = await prisma.user.findUnique({ where: { id: userId } });    if (!user) return res.status(404).json({ error: "Usuário não encontrado" });    const validPassword = await bcrypt.compare(      currentPassword,      user.passwordHash    );    if (!validPassword)      return res.status(401).json({ error: "Senha atual incorreta" });    const hashedNewPassword = await bcrypt.hash(newPassword, 10);    await prisma.user.update({      where: { id: userId },      data: { passwordHash: hashedNewPassword },    });    res.json({ message: "Senha alterada com sucesso!" });  } catch (error) {    console.error("Erro ao alterar senha:", error);    res.status(500).json({ error: "Erro ao alterar senha" });  }};// === Deletar Conta ===export const deleteAccount = async (req, res) => {  try {    const userId = req.user.id;    await deleteUserCascade(userId);        res.json({ message: "Conta excluída com sucesso!" });  } catch (error) {    console.error("Erro ao excluir conta:", error);    res.status(500).json({ error: "Erro ao excluir conta" });  }};// === Iniciar Teste Grátis (7 dias, ilimitado) ===export const startTrial = async (req, res) => {  try {    const userId = req.user.id;    const user = await prisma.user.findUnique({ where: { id: userId } });    if (!user) return res.status(404).json({ error: "Usuário não encontrado" });    if (user.role !== "personal") {      return res.status(403).json({ error: "Apenas personal pode iniciar teste" });    }    if (user.subscriptionPlan) {      // Já tem algum registro (teste/plano). Para evitar reuso do teste, bloqueamos.      const due = user.subscriptionDueDate ? new Date(user.subscriptionDueDate) : null;      if (user.subscriptionPlan === "trial" && due && due > new Date()) {        return res.status(409).json({ error: "Teste grátis já está ativo" });      }      return res.status(409).json({ error: "Você já possui um plano ou teste registrado" });    }    const now = new Date();    const due = new Date(now.getTime() + (PLANS.trial.durationDays || 7) * 24 * 60 * 60 * 1000);    const updated = await prisma.user.update({      where: { id: userId },      data: { subscriptionPlan: "trial", subscriptionDueDate: due },      select: { id: true, name: true, email: true, subscriptionPlan: true, subscriptionDueDate: true },    });    return res.json({      message: "Teste grátis iniciado",      subscription: {        plan: updated.subscriptionPlan,        dueDate: updated.subscriptionDueDate,        limit: PLANS.trial.studentLimit,      },    });  } catch (error) {    console.error("Erro ao iniciar teste:", error);    res.status(500).json({ error: "Erro ao iniciar teste" });  }};// === Obter status de assinatura/teste ===export const getSubscription = async (req, res) => {  try {    const userId = req.user.id;    const user = await prisma.user.findUnique({ where: { id: userId } });    if (!user) return res.status(404).json({ error: "Usuário não encontrado" });    const plan = user.subscriptionPlan || null;    const due = user.subscriptionDueDate || null;    const now = new Date();    const active = !!(plan && due && new Date(due) > now);    const remainingDays = active ? Math.ceil((new Date(due) - now) / (24 * 60 * 60 * 1000)) : 0;    const limit = getStudentLimitForPlan(plan);    const studentLimit = limit === Infinity ? "ilimitado" : limit;    return res.json({ plan, dueDate: due, active, remainingDays, studentLimit });  } catch (error) {    console.error("Erro ao obter assinatura:", error);    res.status(500).json({ error: "Erro ao obter assinatura" });  }};// === Listar planos (para exibição no app) ===export const listPlans = async (_req, res) => {  try {    const plans = Object.values(PLANS).filter((p) => !p.isTrial).map((p) => ({      code: p.code,      name: p.name,      priceBRL: p.priceBRL,      studentLimit: p.studentLimit === Infinity ? "ilimitado" : p.studentLimit,    }));    return res.json({ plans });  } catch (error) {    console.error("Erro ao listar planos:", error);    res.status(500).json({ error: "Erro ao listar planos" });  }};